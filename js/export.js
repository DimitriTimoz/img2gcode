/**
 * Export Functionality Module
 * Handles G-code export for laser engraving on Ender 3
 */

// Laser engraving settings for Ender 3
var LASER_CONFIG = {
    maxPower: 255,        // Maximum fan PWM value (0-255)
    minPower: 0,          // Minimum power for moves
    feedRate: 1000,       // Feed rate in mm/min for engraving
    travelRate: 3000,     // Travel rate for non-cutting moves
    laserOn: 'M106',      // Fan on command (controls laser)
    laserOff: 'M107',     // Fan off command
    units: 'G21',         // Millimeters
    positioning: 'G90',   // Absolute positioning
    homeX: 0,             // Home X position
    homeY: 0              // Home Y position
};

/**
 * Generate G-code header
 */
function generateGcodeHeader() {
    var header = [
        '; Generated by Image to G-Code Converter',
        '; For Ender 3 with laser engraving (fan-controlled)',
        '; Date: ' + new Date().toLocaleString(),
        '',
        '; Initialize',
        'G28 ; Home all axes',
        LASER_CONFIG.units + ' ; Set units to millimeters', 
        LASER_CONFIG.positioning + ' ; Absolute positioning',
        'G92 X0 Y0 ; Set current position as origin',
        'F' + LASER_CONFIG.travelRate + ' ; Set travel feed rate',
        LASER_CONFIG.laserOff + ' ; Ensure laser is off',
        '',
        '; Begin engraving',
        ''
    ];
    return header.join('\n');
}

/**
 * Generate G-code footer
 */
function generateGcodeFooter() {
    var footer = [
        '',
        '; End engraving',
        LASER_CONFIG.laserOff + ' ; Turn off laser',
        'G0 X0 Y0 ; Return to origin',
        'M84 ; Disable steppers',
        '; End of G-code'
    ];
    return footer.join('\n');
}

/**
 * Convert grayscale value to laser power (0-255)
 */
function grayscaleToLaserPower(grayscale) {
    // Invert grayscale: darker = more power
    var inverted = 255 - grayscale;
    
    // Map to laser power range (skip very light areas)
    if (inverted < 10) return 0; // Don't engrave very light areas
    
    return Math.round((inverted / 255) * LASER_CONFIG.maxPower);
}

/**
 * Process image object and generate G-code for raster engraving
 */
function processImageToGcode(imageObj) {
    console.log('Processing image for laser engraving...');
    
    var canvas2d = document.createElement('canvas');
    var ctx = canvas2d.getContext('2d');
    var imgElement = imageObj.getElement();
    
    // Get the image bounds in fabric.js
    var bounds = imageObj.getBoundingRect();
    var scaleX = imageObj.scaleX || 1;
    var scaleY = imageObj.scaleY || 1;
    
    // Calculate actual dimensions in mm
    var widthMm = ENDER3_CONFIG.pixelsToMm(bounds.width);
    var heightMm = ENDER3_CONFIG.pixelsToMm(bounds.height);
    var xOffsetMm = ENDER3_CONFIG.pixelsToMm(bounds.left - ENDER3_CONFIG.usableArea.offsetX);
    var yOffsetMm = ENDER3_CONFIG.pixelsToMm(bounds.top - ENDER3_CONFIG.usableArea.offsetY);
    
    // Set resolution for engraving (pixels per mm)
    var resolution = 5; // 5 pixels per mm = 0.2mm per pixel
    var pixelWidth = Math.round(widthMm * resolution);
    var pixelHeight = Math.round(heightMm * resolution);
    
    canvas2d.width = pixelWidth;
    canvas2d.height = pixelHeight;
    
    // Draw the image to the 2D canvas
    ctx.drawImage(imgElement, 0, 0, pixelWidth, pixelHeight);
    
    // Get pixel data
    var imageData = ctx.getImageData(0, 0, pixelWidth, pixelHeight);
    var data = imageData.data;
    
    var gcode = [];
    gcode.push('; Raster engraving: ' + widthMm.toFixed(1) + 'x' + heightMm.toFixed(1) + 'mm');
    gcode.push('; Resolution: ' + resolution + ' pixels/mm');
    gcode.push('; Position: X' + xOffsetMm.toFixed(1) + ' Y' + yOffsetMm.toFixed(1));
    gcode.push('');
    
    var currentLaserPower = 0;
    var pixelSize = 1 / resolution; // Size of each pixel in mm
    
    // Process each row
    for (var y = 0; y < pixelHeight; y++) {
        var yPos = yOffsetMm + (y * pixelSize);
        var rowHasContent = false;
        var moves = [];
        
        // Check if this row has any content
        for (var x = 0; x < pixelWidth; x++) {
            var pixelIndex = (y * pixelWidth + x) * 4;
            var r = data[pixelIndex];
            var g = data[pixelIndex + 1];
            var b = data[pixelIndex + 2];
            var grayscale = Math.round(0.299 * r + 0.587 * g + 0.114 * b);
            var laserPower = grayscaleToLaserPower(grayscale);
            
            if (laserPower > 0) {
                rowHasContent = true;
                break;
            }
        }
        
        if (!rowHasContent) continue; // Skip empty rows
        
        // Move to start of row
        gcode.push('G0 X' + xOffsetMm.toFixed(2) + ' Y' + yPos.toFixed(2) + ' ; Move to row ' + y);
        
        // Process pixels in this row
        for (var x = 0; x < pixelWidth; x++) {
            var xPos = xOffsetMm + (x * pixelSize);
            var pixelIndex = (y * pixelWidth + x) * 4;
            var r = data[pixelIndex];
            var g = data[pixelIndex + 1];
            var b = data[pixelIndex + 2];
            var grayscale = Math.round(0.299 * r + 0.587 * g + 0.114 * b);
            var laserPower = grayscaleToLaserPower(grayscale);
            
            if (laserPower !== currentLaserPower) {
                if (laserPower > 0) {
                    gcode.push('M106 S' + laserPower + ' ; Set laser power to ' + Math.round((laserPower/255)*100) + '%');
                    gcode.push('F' + LASER_CONFIG.feedRate + ' ; Set engraving speed');
                } else {
                    gcode.push(LASER_CONFIG.laserOff + ' ; Laser off');
                    gcode.push('F' + LASER_CONFIG.travelRate + ' ; Travel speed');
                }
                currentLaserPower = laserPower;
            }
            
            if (laserPower > 0) {
                gcode.push('G1 X' + xPos.toFixed(2) + ' ; Engrave pixel');
            } else {
                gcode.push('G0 X' + xPos.toFixed(2) + ' ; Skip pixel');
            }
        }
        
        // Turn off laser at end of row
        if (currentLaserPower > 0) {
            gcode.push(LASER_CONFIG.laserOff + ' ; End of row');
            currentLaserPower = 0;
        }
    }
    
    return gcode.join('\n');
}

/**
 * Process text object and generate G-code for vector engraving
 */
function processTextToGcode(textObj) {
    console.log('Processing text for laser engraving...');
    
    var bounds = textObj.getBoundingRect();
    var xOffsetMm = ENDER3_CONFIG.pixelsToMm(bounds.left - ENDER3_CONFIG.usableArea.offsetX);
    var yOffsetMm = ENDER3_CONFIG.pixelsToMm(bounds.top - ENDER3_CONFIG.usableArea.offsetY);
    var widthMm = ENDER3_CONFIG.pixelsToMm(bounds.width);
    var heightMm = ENDER3_CONFIG.pixelsToMm(bounds.height);
    
    var gcode = [];
    gcode.push('; Vector text engraving: "' + textObj.text + '"');
    gcode.push('; Font: ' + textObj.fontFamily + ', Size: ' + ENDER3_CONFIG.pixelsToMm(textObj.fontSize).toFixed(1) + 'mm');
    gcode.push('; Position: X' + xOffsetMm.toFixed(1) + ' Y' + yOffsetMm.toFixed(1));
    gcode.push('; Dimensions: ' + widthMm.toFixed(1) + 'x' + heightMm.toFixed(1) + 'mm');
    gcode.push('');
    
    // For text, we'll create a simple outline engraving
    var laserPower = Math.round(LASER_CONFIG.maxPower * 0.7); // 70% power for text
    
    gcode.push('; Text outline engraving');
    gcode.push('G0 X' + xOffsetMm.toFixed(2) + ' Y' + yOffsetMm.toFixed(2) + ' ; Move to text start');
    gcode.push('M106 S' + laserPower + ' ; Set laser power to ' + Math.round((laserPower/255)*100) + '%');
    gcode.push('F' + LASER_CONFIG.feedRate + ' ; Set engraving speed');
    
    // Create a simple rectangular outline for text (in a real implementation, you'd trace the actual font paths)
    gcode.push('G1 X' + (xOffsetMm + widthMm).toFixed(2) + ' ; Right edge');
    gcode.push('G1 Y' + (yOffsetMm + heightMm).toFixed(2) + ' ; Top edge');  
    gcode.push('G1 X' + xOffsetMm.toFixed(2) + ' ; Left edge');
    gcode.push('G1 Y' + yOffsetMm.toFixed(2) + ' ; Bottom edge');
    
    gcode.push(LASER_CONFIG.laserOff + ' ; Turn off laser');
    
    return gcode.join('\n');
}

/**
 * Export canvas content as G-code for laser engraving
 */
function downloadGcode() {
    var objects = canvas.getObjects().filter(function(obj) {
        return !obj.excludeFromExport; // Exclude grid and UI elements
    });
    
    if (objects.length === 0) {
        alert('Aucun objet à exporter. Ajoutez du texte ou des images avant d\'exporter.');
        return;
    }
    
    console.log('Generating G-code for ' + objects.length + ' object(s)...');
    
    var gcode = [];
    
    // Add header
    gcode.push(generateGcodeHeader());
    
    // Process each object
    objects.forEach(function(obj, index) {
        gcode.push('; Object ' + (index + 1) + ': ' + obj.type);
        
        if (obj.type === 'image') {
            gcode.push(processImageToGcode(obj));
        } else if (obj.type === 'text') {
            gcode.push(processTextToGcode(obj));
        } else {
            gcode.push('; Unsupported object type: ' + obj.type);
        }
        
        gcode.push('');
    });
    
    // Add footer
    gcode.push(generateGcodeFooter());
    
    var finalGcode = gcode.join('\n');
    
    // Show preview of G-code
    console.log('Generated G-code:');
    console.log(finalGcode);
    
    // Create file and download
    var blob = new Blob([finalGcode], { type: 'text/plain' });
    var url = URL.createObjectURL(blob);
    var a = document.createElement('a');
    a.href = url;
    a.download = currentProjectName.replace(/[^a-z0-9]/gi, '_').toLowerCase() + '.gcode';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    // Show success message
    var objectTypes = objects.map(obj => obj.type).join(', ');
    alert('G-code généré avec succès!\n\n' +
          'Objets exportés: ' + objects.length + ' (' + objectTypes + ')\n' +
          'Fichier: ' + a.download + '\n\n' +
          'Configuration laser:\n' +
          '- Commande ON: M106 (contrôle du ventilateur)\n' +
          '- Commande OFF: M107\n' +
          '- Puissance max: ' + LASER_CONFIG.maxPower + ' (PWM)\n' +
          '- Vitesse gravure: ' + LASER_CONFIG.feedRate + ' mm/min\n' +
          '- Vitesse déplacement: ' + LASER_CONFIG.travelRate + ' mm/min');
}

/**
 * Update laser configuration from UI
 */
function updateLaserConfig() {
    var maxPowerInput = document.getElementById('maxPower');
    var feedRateInput = document.getElementById('feedRate');
    var travelRateInput = document.getElementById('travelRate');
    var statusElement = document.getElementById('laserStatus');
    
    if (maxPowerInput) LASER_CONFIG.maxPower = parseInt(maxPowerInput.value) || 255;
    if (feedRateInput) LASER_CONFIG.feedRate = parseInt(feedRateInput.value) || 1000;
    if (travelRateInput) LASER_CONFIG.travelRate = parseInt(travelRateInput.value) || 3000;
    
    if (statusElement) {
        statusElement.textContent = `Configuration mise à jour: ${LASER_CONFIG.maxPower} PWM, ${LASER_CONFIG.feedRate}/${LASER_CONFIG.travelRate} mm/min`;
        statusElement.style.color = '#28a745';
        
        // Reset color after 3 seconds
        setTimeout(function() {
            if (statusElement) {
                statusElement.style.color = '#666';
            }
        }, 3000);
    }
    
    console.log('Laser config updated:', LASER_CONFIG);
}
